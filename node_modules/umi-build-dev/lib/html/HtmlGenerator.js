"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = require("path");

var _mkdirp = require("mkdirp");

var _fs = require("fs");

var _getHTMLContent = _interopRequireDefault(require("./getHTMLContent"));

var _getChunksMap = _interopRequireDefault(require("./getChunksMap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class HtmlGenerator {
  constructor(service, opts = {}) {
    this.service = service;
    this.chunksMap = opts.chunksMap;
  }
  /*
  // e.g.
  //
  // path  no htmlSuffix     with htmlSuffix
  // ---
  // /     /index.html       /index.html
  // /a    /a/index.html     /a.html
  // /a/   /a/index.html     /a.html
  // /a/b  /a/b/index.html   /a/b.html
  */


  getHtmlPath(path) {
    const config = this.service.config;
    const htmlSuffix = config.exportStatic && typeof config.exportStatic === 'object' && config.exportStatic.htmlSuffix;
    path = path.slice(1);

    if (path === '' || path === 'index.html') {
      return 'index.html';
    } // remove last slash


    path = path.replace(/\/$/, '');

    if (htmlSuffix) {
      return path;
    } else {
      return `${path}/index.html`;
    }
  }

  generateForRoutes(routes) {
    const paths = this.service.paths;
    routes.forEach(route => {
      if (route.routes) {
        this.generateForRoutes(route.routes);
      } else {
        const path = route.path;
        const content = this.getContent(path);
        const outputPath = (0, _path.join)(paths.absOutputPath, this.getHtmlPath(path));
        (0, _mkdirp.sync)((0, _path.dirname)(outputPath));
        (0, _fs.writeFileSync)(outputPath, content, 'utf-8');
      }
    });
  } // 仅在 build 时调用


  generate() {
    const _this$service = this.service,
          config = _this$service.config,
          routes = _this$service.routes,
          paths = _this$service.paths;

    if (config.exportStatic) {
      this.generateForRoutes(routes);
    } else {
      const content = this.getContent();
      const outputPath = (0, _path.join)(paths.absOutputPath, 'index.html');
      (0, _fs.writeFileSync)(outputPath, content, 'utf-8');
    }
  }

  getContent(path) {
    const minifyHTML = process.env.NODE_ENV === 'production' && process.env.COMPRESS !== 'none';
    return (0, _getHTMLContent.default)(path, this.service, (0, _getChunksMap.default)(this.chunksMap), minifyHTML, process.env.NODE_ENV === 'production');
  }

}

exports.default = HtmlGenerator;