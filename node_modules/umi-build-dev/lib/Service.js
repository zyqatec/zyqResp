"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rimraf = require("rimraf");

var _fs = require("fs");

var _path = require("path");

var _getUserConfig = _interopRequireWildcard(require("af-webpack/getUserConfig"));

var _reactDevUtils = require("af-webpack/react-dev-utils");

var _chalk = _interopRequireDefault(require("chalk"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _getPaths = _interopRequireDefault(require("./getPaths"));

var _getRouteConfig = _interopRequireDefault(require("./routes/getRouteConfig"));

var _registerBabel = _interopRequireDefault(require("./registerBabel"));

var _watch = require("./getConfig/watch");

var _UserConfig = _interopRequireDefault(require("./UserConfig"));

var _getPlugins = _interopRequireDefault(require("./getPlugins"));

var _getWebpackConfig = _interopRequireDefault(require("./getWebpackConfig"));

var _chunksToMap = _interopRequireDefault(require("./utils/chunksToMap"));

var _send = _interopRequireWildcard(require("./send"));

var _FilesGenerator = _interopRequireDefault(require("./FilesGenerator"));

var _HtmlGenerator = _interopRequireDefault(require("./html/HtmlGenerator"));

var _createRouteMiddleware = _interopRequireDefault(require("./middlewares/createRouteMiddleware"));

var _PluginAPI = _interopRequireDefault(require("./PluginAPI"));

var _createUmiDevMiddleware = _interopRequireDefault(require("./middlewares/createUmiDevMiddleware"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = require('debug')('umi-build-dev:Service');

class Service {
  constructor(cwd, {
    plugins: pluginFiles,
    babel,
    entryJSTpl,
    routerTpl,
    preact,
    extraResolveModules,
    libraryAlias = {},
    libraryName = 'umi',
    staticDirectory = 'static',
    tmpDirectory = '.umi',
    outputPath = './dist'
  }) {
    _defineProperty(_defineProperty(_defineProperty(_defineProperty(this, "reload", () => {
      if (!this.devServer) return;
      this.devServer.sockWrite(this.devServer.sockets, 'content-changed');
    }), "printWarn", messages => {
      if (!this.devServer) return;
      messages = typeof messages === 'string' ? [messages] : messages;
      this.devServer.sockWrite(this.devServer.sockets, 'warns', messages);
    }), "printError", messages => {
      if (!this.devServer) return;
      messages = typeof messages === 'string' ? [messages] : messages;
      this.devServer.sockWrite(this.devServer.sockets, 'errors', messages);
    }), "restart", why => {
      if (!this.devServer) return;
      (0, _reactDevUtils.clearConsole)();
      console.log(_chalk.default.green(`Since ${why}, try to restart server`));
      (0, _watch.unwatch)();
      this.devServer.close();
      process.send({
        type: 'RESTART'
      });
    });

    this.cwd = cwd || process.cwd();
    this.pluginFiles = pluginFiles;
    this.babel = babel;
    this.entryJSTpl = entryJSTpl;
    this.routerTpl = routerTpl;
    this.preact = preact;
    this.extraResolveModules = extraResolveModules;
    this.libraryAlias = libraryAlias;
    this.libraryName = libraryName;
    this.staticDirectory = staticDirectory;
    this.tmpDirectory = tmpDirectory;
    this.outputPath = outputPath;
    this.paths = (0, _getPaths.default)(this);
    this.pluginMethods = {};
    (0, _registerBabel.default)(this.babel, {
      cwd: this.cwd
    });
  }

  setRoutes(routes) {
    this.routes = routes;
  }

  getWebpackRCConfig() {
    return (0, _getUserConfig.default)({
      cwd: this.cwd,
      disabledConfigs: ['entry', 'outputPath', 'hash']
    });
  }

  dev() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.initPlugins(); // 获取用户 config.js 配置


      const userConfig = new _UserConfig.default(_this);

      try {
        _this.config = userConfig.getConfig({
          force: true
        });
        (0, _objectAssign.default)(_this._initialConfig, _this.config);
      } catch (e) {
        console.error(_chalk.default.red(e.message));
        debug('Get config failed, watch config and reload'); // 监听配置项变更，然后重新执行 dev 逻辑

        userConfig.watchConfigs((event, path) => {
          debug(`[${event}] ${path}, unwatch and reload`); // 重新执行 dev 逻辑

          userConfig.unwatch();

          _this.dev();
        });
        return;
      } // 获取 .webpackrc 配置


      let returnedWatchWebpackRCConfig = null;

      try {
        const configObj = _this.getWebpackRCConfig();

        _this.webpackRCConfig = configObj.config;
        returnedWatchWebpackRCConfig = configObj.watch;
      } catch (e) {
        console.error(_chalk.default.red(e.message));
        debug('Get .webpackrc config failed, watch config and reload'); // 监听配置项变更，然后重新执行 dev 逻辑

        (0, _getUserConfig.watchConfigs)().on('all', (event, path) => {
          debug(`[${event}] ${path}, unwatch and reload`); // 重新执行 dev 逻辑

          (0, _getUserConfig.unwatchConfigs)();

          _this.dev();
        });
        return;
      }

      _this.applyPlugins('onStart');

      _this.initRoutes(); // 生成入口文件


      const filesGenerator = _this.filesGenerator = new _FilesGenerator.default(_this);

      try {
        filesGenerator.generate({
          onChange: () => {
            _this.sendPageList();
          }
        });
      } catch (e) {
        console.error(_chalk.default.red(e.message));
        console.error(_chalk.default.red(e.stack));
        debug('Generate entry failed, watch pages and reload');
        filesGenerator.watch({
          onChange: () => {
            filesGenerator.unwatch();

            _this.dev();
          }
        });
        return;
      }

      const webpackConfig = (0, _getWebpackConfig.default)(_this);
      _this.webpackConfig = webpackConfig;

      const extraMiddlewares = _this.applyPlugins('modifyMiddlewares', {
        initialValue: [(0, _createUmiDevMiddleware.default)(_this, {
          rebuildEntry() {
            filesGenerator.rebuild();
          }

        }), (0, _createRouteMiddleware.default)(_this)]
      });

      yield _this.applyPluginsAsync('beforeDevAsync');

      require('af-webpack/dev').default({
        cwd: _this.cwd,
        // eslint-disable-line
        webpackConfig,
        extraMiddlewares,
        contentBase: './path-do-not-exists',
        beforeServerWithApp: app => {
          _this.applyPlugins('beforeServerWithApp', {
            args: {
              app
            }
          });
        },
        beforeServer: devServer => {
          _this.applyPlugins('beforeServer', {
            args: {
              devServer
            }
          });
        },
        afterServer: devServer => {
          _this.devServer = devServer;

          _this.applyPlugins('afterServer', {
            args: {
              devServer
            }
          });

          returnedWatchWebpackRCConfig(devServer);
          userConfig.setConfig(_this.config);
          userConfig.watchWithDevServer();
          filesGenerator.watch();
        },
        onCompileDone: stats => {
          _this.applyPlugins('onCompileDone', {
            args: {
              stats
            }
          });
        },
        proxy: _this.config.proxy || _this.webpackRCConfig.proxy || {},
        // 支付宝 IDE 里不自动打开浏览器
        openBrowser: !process.env.ALIPAY_EDITOR,
        historyApiFallback: false
      });
    })();
  }

  initRoutes() {
    this.routes = this.applyPlugins('modifyRoutes', {
      initialValue: (0, _getRouteConfig.default)(this.paths, this.config)
    });
  }

  initPlugins() {
    const config = _UserConfig.default.getConfig({
      cwd: this.cwd,
      service: this
    });

    debug(`user config: ${JSON.stringify(config)}`);

    try {
      this.plugins = (0, _getPlugins.default)({
        configPlugins: config.plugins || [],
        pluginsFromOpts: this.pluginFiles,
        cwd: this.cwd,
        babel: this.babel
      });
    } catch (e) {
      console.error(_chalk.default.red(e.message));
      process.exit(1);
    }

    this._initialConfig = config;
    this.config = new Proxy(config, {
      set: (target, name, value) => {
        target[name] = value;
        this.config[name] = value;
      }
    });
    debug(`plugins: ${this.plugins.map(p => p.id).join(' | ')}`);
    this.plugins.forEach(({
      id,
      apply,
      opts
    }) => {
      try {
        apply(new _PluginAPI.default(id, this), opts);
      } catch (e) {
        console.error(_chalk.default.red(`Plugin ${id} initialize failed, ${e.message}`));
        console.error(e);
        process.exit(1);
      }
    });
  }

  applyPlugins(key, opts = {}) {
    return (this.pluginMethods[key] || []).reduce((memo, {
      fn
    }) => {
      try {
        return fn({
          memo,
          args: opts.args
        });
      } catch (e) {
        console.error(_chalk.default.red(`Plugin apply failed: ${e.message}`));
        throw e;
      }
    }, opts.initialValue);
  }

  applyPluginsAsync(key, opts = {}) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const plugins = _this2.pluginMethods[key] || [];
      let memo = opts.initialValue;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const plugin = _step.value;
          const fn = plugin.fn;
          memo = yield fn({
            memo,
            args: opts.args
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    })();
  }

  sendPageList() {
    const pageList = this.routes.map(route => {
      return {
        path: route.path
      };
    });
    (0, _send.default)({
      type: _send.PAGE_LIST,
      payload: pageList
    });
  }

  build() {
    this.initPlugins();
    const userConfig = new _UserConfig.default(this);
    this.config = userConfig.getConfig();
    (0, _objectAssign.default)(this._initialConfig, this.config);
    this.webpackRCConfig = this.getWebpackRCConfig().config;
    this.applyPlugins('onStart');
    this.initRoutes();
    debug(`Clean tmp dir ${this.paths.tmpDirPath}`);
    (0, _rimraf.sync)(this.paths.absTmpDirPath);
    debug(`Clean output path ${this.paths.outputPath}`);
    (0, _rimraf.sync)(this.paths.absOutputPath);
    debug('Generate entry');
    const filesGenerator = new _FilesGenerator.default(this);
    filesGenerator.generate();
    const webpackConfig = (0, _getWebpackConfig.default)(this);
    this.webpackConfig = webpackConfig;
    return new Promise(resolve => {
      require('af-webpack/build').default({
        cwd: this.cwd,
        // eslint-disable-line
        webpackConfig,
        success: ({
          stats
        }) => {
          if (process.env.RM_TMPDIR !== 'none') {
            debug(`Clean tmp dir ${this.paths.tmpDirPath}`);
            (0, _rimraf.sync)(this.paths.absTmpDirPath);
          }

          this.applyPlugins('beforeGenerateHTML');

          if (process.env.HTML !== 'none') {
            debug(`Bundle html files`);
            const chunksMap = (0, _chunksToMap.default)(stats.compilation.chunks);

            try {
              const hg = new _HtmlGenerator.default(this, {
                chunksMap
              });
              hg.generate();
            } catch (e) {
              console.log(e);
            }

            debug('Move service-worker.js');
            const sourceSW = (0, _path.join)(this.paths.absOutputPath, this.staticDirectory, 'service-worker.js');
            const targetSW = (0, _path.join)(this.paths.absOutputPath, 'service-worker.js');

            if ((0, _fs.existsSync)(sourceSW)) {
              (0, _fs.renameSync)(sourceSW, targetSW);
            }
          }

          this.applyPlugins('buildSuccess');
          this.sendPageList();
          (0, _send.default)({
            type: _send.BUILD_DONE
          });
          resolve();
        }
      });
    });
  }

}

exports.default = Service;