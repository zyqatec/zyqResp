"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = require("path");

var _pathIsAbsolute = _interopRequireDefault(require("path-is-absolute"));

var _lodash = _interopRequireDefault(require("lodash.clonedeep"));

var _winPath = _interopRequireDefault(require("../winPath"));

var _normalizeEntry = _interopRequireDefault(require("../normalizeEntry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

let targetLevel = null;
let level = 0;

var _default = (rawRoutes, service, requestedMap, env) => {
  // clone 一份数据，避免 patchRoute 修改到原始的 routes 配置
  const routes = (0, _lodash.default)(rawRoutes);

  if (process.env.CODE_SPLITTING_LEVEL) {
    targetLevel = process.env.CODE_SPLITTING_LEVEL;
  } else {
    targetLevel = 1;
    const rootRoute = routes.filter(route => route.path === '/')[0];

    if (rootRoute && rootRoute.routes) {
      targetLevel = 2;
    }
  }

  const config = service.config,
        applyPlugins = service.applyPlugins,
        paths = service.paths;
  patchRoutes(routes);
  const loading = config.loading;
  let loadingOpts = '';

  if (loading) {
    loadingOpts = ` loading: require('${(0, _winPath.default)((0, _path.join)(paths.cwd, loading))}').default `;
  }

  return JSON.stringify(routes, (key, value) => {
    switch (key) {
      case 'component':
        if (value.startsWith('() =>')) {
          return value;
        }

        const _value$split = value.split('^^'),
              _value$split2 = _slicedToArray(_value$split, 3),
              component = _value$split2[0],
              webpackChunkName = _value$split2[1],
              path = _value$split2[2];

        const importPath = (0, _pathIsAbsolute.default)(component) ? component : (0, _winPath.default)((0, _path.relative)(paths.tmpDirPath, component));
        let ret;
        let isCompiling = false;
        const compilingPath = (0, _winPath.default)(paths.absCompilingComponentPath);

        if (env === 'production' && !config.disableDynamicImport) {
          // 按需加载
          ret = `dynamic(() => import(/* webpackChunkName: ^${webpackChunkName}^ */'${importPath}'), {${loadingOpts}})`;
        } else {
          // 非按需加载
          if (env === 'production' || // 无 socket 时按需编译体验很差，所以禁用
          process.env.SOCKET_SERVER === 'none' || process.env.COMPILE_ON_DEMAND === 'none' || !process.env.COMPILE_ON_DEMAND || !path || requestedMap[path]) {
            ret = `require('${importPath}').default`;
          } else {
            isCompiling = true;
            let newPath = null;

            if (config.exportStatic && config.exportStatic.htmlSuffix) {
              newPath = path.replace('(.html)?', '');
            }

            ret = `() => React.createElement(require('${compilingPath}').default, { route: '${newPath || path}' })`;
          }
        }

        if (applyPlugins) {
          ret = applyPlugins.call(service, 'modifyRouteComponent', {
            initialValue: ret,
            args: {
              isCompiling,
              pageJSFile: importPath,
              importPath,
              webpackChunkName,
              config
            }
          });
        }

        return ret;

      case 'Route':
        return `require('${(0, _winPath.default)((0, _path.join)(paths.cwd, value))}').default`;

      default:
        return value;
    }
  }, 2);
};

exports.default = _default;

function patchRoutes(routes, webpackChunkName) {
  level += 1;
  routes.forEach(route => {
    patchRoute(route, webpackChunkName);
  });
  level -= 1;
}

function patchRoute(route, webpackChunkName) {
  if (route.component && !route.component.startsWith('() =>')) {
    if (!webpackChunkName || level <= targetLevel) {
      webpackChunkName = (0, _normalizeEntry.default)(route.component || 'common_component');
    }

    route.component = [route.component || 'common_component', webpackChunkName, route.path].join('^^');
  }

  if (route.routes) {
    // 只在一级路由做按需编译
    patchRoutes(route.routes, webpackChunkName);
  }
}