"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = require("path");

var _fs = require("fs");

var _getConfig = _interopRequireDefault(require("af-webpack/getConfig"));

var _reactDevUtils = require("af-webpack/react-dev-utils");

var _browsers = _interopRequireDefault(require("./defaultConfigs/browsers"));

var _getPageCountFromRoutes = _interopRequireDefault(require("./routes/getPageCountFromRoutes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = require('debug')('umi-build-dev:getWebpackConfig');

function _default(service = {}) {
  const cwd = service.cwd,
        config = service.config,
        babel = service.babel,
        hash = service.hash,
        routes = service.routes,
        libraryAlias = service.libraryAlias,
        libraryName = service.libraryName,
        staticDirectory = service.staticDirectory,
        extraResolveModules = service.extraResolveModules,
        paths = service.paths,
        preact = service.preact;
  const isDev = process.env.NODE_ENV === 'development'; // merge config to webpackRCConfig

  let webpackRCConfig = service.webpackRCConfig;
  webpackRCConfig = _objectSpread({}, config || {}, webpackRCConfig || {}); // entry

  const entryScript = (0, _path.join)(cwd, `./${paths.tmpDirPath}/${libraryName}.js`);
  const setPublicPathFile = (0, _path.join)(__dirname, '../template/setPublicPath.js');
  const entry = isDev ? {
    [libraryName]: [...(process.env.HMR === 'none' ? [] : [_reactDevUtils.webpackHotDevClientPath]), entryScript]
  } : {
    [libraryName]: [setPublicPathFile, entryScript]
  };
  const pageCount = process.env.PAGE_COUNT || (0, _getPageCountFromRoutes.default)(routes);
  debug(`pageCount: ${pageCount}`); // default react, support config with preact
  // 优先级：用户配置 > preact argument > default (React)

  const preactAlias = {
    react: (0, _path.dirname)(require.resolve('preact-compat/package.json')),
    'react-dom': (0, _path.dirname)(require.resolve('preact-compat/package.json')),
    'create-react-class': require.resolve('preact-compat/lib/create-react-class')
  };
  const reactAlias = {
    react: (0, _path.dirname)(require.resolve('react/package.json')),
    'react-dom': (0, _path.dirname)(require.resolve('react-dom/package.json'))
  };
  let preactOrReactAlias = preact ? preactAlias : reactAlias;

  if (config.preact === true) {
    preactOrReactAlias = preactAlias;
  }

  if (config.preact === false) {
    preactOrReactAlias = reactAlias;
  } // 关于为啥放 webpack 而不放 babel-plugin-module-resolver 里
  // 详见：https://tinyletter.com/sorrycc/letters/babel


  const libAlias = _objectSpread({
    'react-router-dom': (0, _path.dirname)(require.resolve('react-router-dom/package.json')),
    'react-router': (0, _path.dirname)(require.resolve('react-router/package.json')),
    history: (0, _path.dirname)(require.resolve('umi-history/package.json'))
  }, Object.keys(libraryAlias).reduce((memo, key) => {
    return _objectSpread({}, memo, {
      [`${libraryName}/${key}`]: libraryAlias[key]
    });
  }, {})); // TODO: 出错处理，用户可能指定了依赖，但未指定 npm install


  const pkgPath = (0, _path.join)(cwd, 'package.json');

  if ((0, _fs.existsSync)(pkgPath)) {
    const _require = require(pkgPath),
          _require$dependencies = _require.dependencies,
          dependencies = _require$dependencies === void 0 ? {} : _require$dependencies; // eslint-disable-line


    if (preact) {
      if (dependencies['preact-compat']) {
        libAlias.react = libAlias['react-dom'] = (0, _path.dirname)( // eslint-disable-line
        require.resolve((0, _path.join)(cwd, 'node_modules/preact-compat/package.json')));
      }
    } else {
      if (dependencies.react) {
        libAlias.react = (0, _path.dirname)(require.resolve((0, _path.join)(cwd, 'node_modules/react/package.json')));
      }

      if (dependencies['react-dom']) {
        libAlias['react-dom'] = (0, _path.dirname)(require.resolve((0, _path.join)(cwd, 'node_modules/react-dom/package.json')));
      }
    }
  }

  const browserslist = webpackRCConfig.browserslist || _browsers.default;

  let afWebpackOpts = _objectSpread({
    cwd
  }, webpackRCConfig, {
    // 不允许配置
    entry,
    outputPath: process.env.HTML === 'none' ? paths.absOutputPath : (0, _path.join)(paths.absOutputPath, staticDirectory),
    hash: !isDev && !config.disableHash,
    // 扩展
    babel: webpackRCConfig.babel || {
      presets: [[babel, {
        browsers: browserslist
      }], ...(webpackRCConfig.extraBabelPresets || [])],
      plugins: webpackRCConfig.extraBabelPlugins || []
    },
    browserslist,
    extraResolveModules: [...(webpackRCConfig.extraResolveModules || []), ...(extraResolveModules || [])],
    cssModulesExcludes: [...(webpackRCConfig.cssModulesExcludes || [])],
    define: _objectSpread({
      // For registerServiceWorker.js
      'process.env.BASE_URL': process.env.BASE_URL,
      'process.env.BIGFISH_COMPAT': process.env.BIGFISH_COMPAT,
      __UMI_HTML_SUFFIX: !!(config.exportStatic && typeof config.exportStatic === 'object' && config.exportStatic.htmlSuffix)
    }, webpackRCConfig.define || {}),
    alias: _objectSpread({}, preactOrReactAlias, libAlias, webpackRCConfig.alias || {})
  }, isDev ? {
    // 生产环境的 publicPath 是服务端把 assets 发布到 cdn 后配到 HTML 里的
    // 开发环境的 publicPath 写死 /static/
    publicPath: `/`
  } : _objectSpread({
    publicPath: webpackRCConfig.publicPath || `/${staticDirectory}/`,
    commons: webpackRCConfig.commons || [{
      async: 'common',
      children: true,

      minChunks(module, count) {
        if (pageCount <= 2) {
          return count >= pageCount;
        }

        return count >= pageCount * 0.5;
      }

    }]
  }, config.disableServiceWorker ? {} : {
    serviceworker: _objectSpread({}, webpackRCConfig.serviceworker || {})
  }));

  afWebpackOpts = service.applyPlugins('modifyAFWebpackOpts', {
    initialValue: afWebpackOpts
  });
  let webpackConfig = (0, _getConfig.default)(afWebpackOpts);
  webpackConfig = service.applyPlugins('modifyWebpackConfig', {
    initialValue: webpackConfig
  });
  return webpackConfig;
}